apply plugin: 'java'
apply plugin: 'jacoco'
<<<<<<< HEAD

=======
apply plugin: 'application'
>>>>>>> d0189210fe5a114bf44a5a016c954a8ef53dd3ae

repositories {
    mavenCentral()
}

dependencies {
   testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}


jacocoTestReport {
   reports {
        xml.required = true
   }
<<<<<<< HEAD
    dependsOn test
=======
    //dependsOn test
>>>>>>> d0189210fe5a114bf44a5a016c954a8ef53dd3ae
}

test {
    useJUnitPlatform()
}

<<<<<<< HEAD
=======
sourceSets {
    main {
        java {
            srcDir "Produccion"
        }
    }

    test {
        java {
            srcDir "Pruebas"
        }
    }
}

application {
    // Define the main class for the application.
    mainClass = 'Airport'
}

>>>>>>> d0189210fe5a114bf44a5a016c954a8ef53dd3ae
/*
 * display unit tests excution result in console
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
